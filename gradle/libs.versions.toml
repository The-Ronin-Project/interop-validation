[versions]
apache-kafka = "3.6.1"
dbrider = "1.41.0"
ehrda = "1.6.0"
fhir-models = "1.3.0"
idea-ext = "1.1.7"
interop-common = "4.0.0"
interop-event-resource-internal = "1.2.3"
interop-event-resource-request = "1.1.0"
interop-fhir = "9.0.0"
interop-gradle = "4.0.0"
interop-kafka = "9.0.0"
jackson = "2.16.0"
jakarta = "3.0.2"
kotlin-logging = "3.0.5"
ktor = "2.3.7"
ktorm = "3.6.0"
liquibase = "4.25.0"
logstash = "7.4"
mockk = "1.13.8"
mockwebserver = "4.12.0"
mysql = "8.0.33"
openapi-generator = "7.1.0"
ronin-kafka = "1.1.1"
spring-boot = "3.2.0"
springdoc = "2.3.0"
testcontainers = "1.19.3"
uuid-creator = "5.3.5"

[libraries]
common-fhir-r4-models = { module = "com.projectronin.fhir:common-fhir-r4-models", version.ref = "fhir-models" }
ehr-data-authority-models = { module = "com.projectronin.ehr:ehr-data-authority-models", version.ref = "ehrda" }
event-interop-resource-internal = { module = "com.projectronin.contract.event:event-interop-resource-internal", version.ref = "interop-event-resource-internal" }
event-interop-resource-request = { module = "com.projectronin.contract.event:event-interop-resource-request", version.ref = "interop-event-resource-request" }
interop-common = { module = "com.projectronin.interop:interop-common", version.ref = "interop-common" }
interop-commonHttp = { module = "com.projectronin.interop:interop-common-http", version.ref = "interop-common" }
interop-commonJackson = { module = "com.projectronin.interop:interop-common-jackson", version.ref = "interop-common" }
interop-commonKtorm = { module = "com.projectronin.interop:interop-common-ktorm", version.ref = "interop-common" }
interop-commonTestDb = { module = "com.projectronin.interop:interop-common-test-db", version.ref = "interop-common" }
interop-fhir = { module = "com.projectronin.interop.fhir:interop-fhir", version.ref = "interop-fhir" }
interop-kafka = { module = "com.projectronin.interop.publish:interop-kafka", version.ref = "interop-kafka" }
interop-kafka-testing-client = { module = "com.projectronin.interop.publish:interop-kafka-testing-client", version.ref = "interop-kafka" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api", version.ref = "jakarta" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "apache-kafka" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }
ktorm-core = { module = "org.ktorm:ktorm-core", version.ref = "ktorm" }
ktorm-support-mysql = { module = "org.ktorm:ktorm-support-mysql", version.ref = "ktorm" }
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockwebserver" }
mysql-connector-java = { module = "mysql:mysql-connector-java", version.ref = "mysql" }
rider-core = { module = "com.github.database-rider:rider-core", version.ref = "dbrider" }
ronin-kafka = { module = "com.projectronin:ronin-kafka", version.ref = "ronin-kafka" }
spring-boot-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-parent = { module = "org.springframework.boot:spring-boot-parent", version.ref = "spring-boot" }
springdoc-openapi-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }
testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
uuid-creator = { module = "com.github.f4b6a3:uuid-creator", version.ref = "uuid-creator" }

[bundles]
jackson = [
    "jackson-dataformat-xml",
    "jackson-dataformat-yaml",
    "jackson-datatype-jsr310",
    "jackson-module-kotlin",
]
ktor = [
    "ktor-client-cio",
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-serialization-jackson",
]

[plugins]
idea-ext = { id = "org.jetbrains.gradle.plugin.idea-ext", version.ref = "idea-ext" }
interop-docker-integration = { id = "com.projectronin.interop.gradle.docker-integration", version.ref = "interop-gradle" }
interop-junit = { id = "com.projectronin.interop.gradle.junit", version.ref = "interop-gradle" }
interop-server-publish = { id = "com.projectronin.interop.gradle.server-publish", version.ref = "interop-gradle" }
interop-server-version = { id = "com.projectronin.interop.gradle.server-version", version.ref = "interop-gradle" }
interop-sonarqube = { id = "com.projectronin.interop.gradle.sonarqube", version.ref = "interop-gradle" }
interop-spring-boot = { id = "com.projectronin.interop.gradle.spring-boot", version.ref = "interop-gradle" }
interop-spring-framework = { id = "com.projectronin.interop.gradle.spring", version.ref = "interop-gradle" }
interop-version-catalog = { id = "com.projectronin.interop.gradle.version-catalog-update", version.ref = "interop-gradle" }
openapi-generator = { id = "org.openapi.generator", version.ref = "openapi-generator" }
